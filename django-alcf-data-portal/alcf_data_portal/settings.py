"""
Django settings for alcf_data_portal project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
from urllib.parse import urlparse
from django.utils.module_loading import import_string
from alcf_data_portal.kasthuri import kasthuri_fields
from alcf_data_portal.cp1 import cp1_fields
from alcf_data_portal.dlhub import dlhub_fields
from alcf_data_portal.cosmo import cosmo_fields

from alcf_data_portal.field_utils import get_previews
from concierge_app import CONCIERGE_SCOPE

try:
    # The globus_automate_client is an optional dependency
    import globus_automate_client
    flow_scopes = [globus_automate_client.flows_client.MANAGE_FLOWS_SCOPE]
except ImportError:
    flow_scopes = []

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# Sets Django default, if the @login_required decorator is ever encountered
LOGIN_URL = '/login/globus'
# SECURITY WARNING: keep the secret key used in production secret!
SOCIAL_AUTH_GLOBUS_KEY = 'ecb27add-7b02-43a1-9da5-71fb4246395d'
# Automate App Client Key
# This is a separate Globus Native app used for authorizing pre-set flows for
# other users to call.
# AUTOMATE_CLIENT_KEY = '0f60225a-0fe4-4684-90ce-6ea46dffe3ac'
AUTOMATE_CLIENT_KEY = 'e6c75d97-532a-4c88-b031-8584a319fa3e'
# SOCIAL_AUTH_GLOBUS_SECRET = 'put this in alcf_data_portal/local_settings.py'
SECRET_KEY = 'use `openssl rand -hex 32` in local_settings.py in prod'

# Set DEBUG in local_settings.py
DEBUG = False

# Set minid creation to Test minids or Production Minids
MINID_TEST = True
# Set MDF tools and publishing to test or production
MDF_TEST = True

PROJECT_TITLE = 'ALCF Petrel Data'
# This is custom, not currently supported by Globus Portal Framework.
# It needs to be injected into the global context_processor to work.
PORTAL_TAGLINE = 'Providing Researchers Data Sharing Capabilities'


SEARCH_INDEXES = {
    'mdf': {
        'filter_match': 'match-any',
        'name': 'The Materials Data Facility',
        'description': 'A simple way to publish, discover, and access '
                       'materials datasets',
        'access': 'public',
        'uuid': '1a57bbe5-5272-477f-9d31-343b8258b7a5',  # mdf
        # 'uuid': '5acded0c-a534-45af-84be-dcf042e36412',  # mdf-test
        # 'uuid': 'aeccc263-f083-45f5-ab1d-08ee702b3384',  # mdf-dev
        'template_override_dir': 'mdf',
        'default_query': 'q=*&filter-match-any.mdf.resource_type=dataset',
        'fields': [
            'mdf',
            'dc',
            'data',
            'services',
            'files',
            'material'
        ],
        'facets': [
            {
                'name': 'Resource Type',
                'type': 'terms',
                'field_name': 'mdf.resource_type',
                'size': 10,
                'filter_match': 'match-any'
            },
            {
                'name': 'Tags',
                'type': 'terms',
                'field_name': 'dc.subjects.subject',
                'size': 10,
                'filter-match': 'match-all'
            },
            {
                'name': 'Organization',
                'type': 'terms',
                'field_name': 'mdf.organizations',
                'size': 10,
                'filter-match': 'match-any'
            },
            {
                'name': 'Publication Year',
                'type': 'terms',
                'field_name': 'dc.publicationYear',
                'size': 10,
                'filter-match': 'match-any'
            },
            {
                'name': 'Elements',
                'type': 'terms',
                'field_name': 'material.elements',
                'size': 10,
                'filter-match': 'match-all'
            },
        ],
    },
    'opencosmo': {
        'name': 'Cosmology',
        'description': 'N-body cosmological simulation data for machine '
                       'learning',
        'access': 'searchable',
        'uuid': '3eb230fb-0efa-4652-9b6c-885bc0e33dfe',  # opencosmo
        'template_override_dir': 'opencosmo',
        'fields': [
            ('remote_file_manifest', cosmo_fields.remote_file_manifest),
        ],
        'facets': [
            {
                'name': 'SIMULATION',
                'type': 'terms',
                'field_name': 'simulation',
                'size': 10
            },
            {
                'name': 'MODEL',
                'type': 'terms',
                'field_name': 'model',
                'size': 20
            },
            {
                'name': 'REDSHIFT VALUES',
                'type': 'terms',
                'field_name': 'redshift',
                'size': 20
            },
            {
                'name': 'DATA TYPE',
                'type': 'terms',
                'field_name': 'data_type',
                'size': 10
            },
        ],
    },
    'kasthuri': {
        'name': 'Neurocartography',
        'description':
            'Kasthuri\'s lab pioneering new techniques for large volume '
            'reconstructions of the fine structure of the nervous system',
        'access': 'searchable',
        'uuid': '7dba248c-f41e-4bed-89f9-0043353da169',
        'template_override_dir': 'kasthuri',
        'fields': [
            'dc',
            'project_metadata',
            ('all_preview', get_previews),
            ('detail_results', kasthuri_fields.beamline_detail),
            ('search_results', kasthuri_fields.search_results),
            ('globus_app_link', kasthuri_fields.globus_app_link),
            ('https_url', kasthuri_fields.https_url),
            ('copy_to_clipboard_link', kasthuri_fields.https_url),
            ('remote_file_manifest', kasthuri_fields.remote_file_manifest),
            ('resource_server', lambda r: 'petrel_https_server'),
            ('center_preview_png', kasthuri_fields.get_center_png),
            ('detail_preview_pngs', kasthuri_fields.get_detail_preview_pngs),
            ('detail_listing_preview_pngs',
             kasthuri_fields.get_listing_detail_preview_pngs),
            ('other_previews', kasthuri_fields.other_previews),
            'recon_preview',
            ('title', kasthuri_fields.title),
        ],
        'facets': [
            {
                'name': 'Recon Type',
                'field_name': 'project_metadata.beamline.recon_type.value',
            },
            {
                'name': 'Creator',
                'field_name': 'dc.creators.creatorName',
                'size': 15,
            },
            {
                'name': 'Acquisition Date',
                'field_name': 'dc.publicationYear',
            },
        ],
    },
    'ramses': {
        'name': 'Ramses Performance Data',
        'description': 'A detailed analysis of Atlas storage and Globus '
                       'Transfers',
        'access': 'searchable',
        'uuid': '5e83718e-add0-4f06-a00d-577dc78359bc',
        'template_override_dir': 'ramses',
        'fields': [
            'perfdata',
            ('remote_file_manifest', lambda x: [x[0]['remote_file_manifest']]),
            'globus_group',
            ('globus_http_endpoint', lambda x:
                'b4eab318-fc86-11e7-a5a9-0a448319c2f8.petrel.host'),
            ('globus_http_path', lambda x:
                urlparse(x[0]['remote_file_manifest']['url']).path),
            ('globus_http_scope', lambda x: 'petrel_https_server'),
            'field_metadata',
            ('title', lambda etry: etry[0]['perfdata']['titles'][0]['value']),
        ],
        'facets': [
            {
                "name": "Contributor",
                "type": "terms",
                "field_name": "perfdata.contributors.contributor_name",
                "size": 10
            },
            {
                "name": "Category",
                "field_name": "perfdata.category.value",
            },
            {
                "name": "Subjects",
                "field_name": "perfdata.subjects.value",
            },
            {
                "name": "Publication Year",
                "field_name": "perfdata.publication_year.value",
            },
            {
                "name": "Organization",
                "field_name": "perfdata.organization.value",
            },
            {
                "name": "Maximum File Size",
                "field_name": "perfdata.maximum_file_size.value",
            }
        ],
    },
    'nci-pilot1': {
        'uuid': '889729e8-d101-417d-9817-fa9d964fdbc9',
        'name': 'NCI Pilot 1',
        'description':
            'Predictive models for cancer therapy can one day support the '
            'treatment choices a physician and patient make toward achieving '
            'the best possible clinical outcome',
        'access': 'private',
        'template_override_dir': 'candle_pilot1',
        'fields': [
            ('title', cp1_fields.title),
            ('truncated_description', cp1_fields.get_truncated_description),
            ('description', cp1_fields.get_full_description),
            ('search_results', cp1_fields.search_results),
            ('globus_app_link', cp1_fields.globus_app_link),
            ('filename', cp1_fields.filename),
            ('remote_file_manifest', cp1_fields.remote_file_manifest),
            'dc',
            'ncipilot',
            ('https_url', cp1_fields.https_url),
            ('copy_to_clipboard_link', cp1_fields.https_url),
            ('resource_server', lambda r: 'petrel_https_server')
        ],
        'facets': [
            {
                "name": "Creator",
                "field_name": "dc.creators.creatorName",

            },
            {
                "name": "Data Type",
                "field_name": "project_metadata.data_type",
            },
            {
                "name": "Dataframe Type",
                "field_name": "project_metadata.dataframe_type",
            },

        ],
        'filter_match': 'match-any',
    },
    'dlhub': {
        'uuid': '847c9105-18a0-4ffb-8a71-03dd76dfcc9d',
        'name': 'DLHub',
        'description':
            'A multi-tenant system that provides both model repository and '
            'serving capabilities with a focus on science applications',
        'access': 'public',
        'template_override_dir': 'dlhub',
        'default_query': 'q=*&page=1&filter-match-all.dlhub.test=False',
        'facets': [

            {"name": "Domain", "field_name": "dlhub.domains"},
            {"name": "Test", "field_name": "dlhub.test"},
            {
                "name": "Publisher",
                "field_name": "datacite.publisher",
            },
            {
                "name": "Publication Year",
                "field_name": "datacite.publicationYear",
            },
            {
                "name": "Visibility",
                "field_name": "dlhub.visible_to"
            },
            {
                "name": "Model Type",
                "field_name": "servable.model_type",
            },
            {
                "name": "Shim",
                "field_name": "servable.shim",
            },
            {
                "name": "DLHub Version",
                "field_name": "dlhub.version"
            },
        ],
        'fields': [
            ('title', lambda r: r[0]['datacite']['titles'][0]['title']),
            ('search_results', dlhub_fields.search_results),
            ('detailed_info', dlhub_fields.detailed_info),
        ]
    },
}

SEARCH_INDEXES['nci-pilot1-test'] = SEARCH_INDEXES['nci-pilot1'].copy()
SEARCH_INDEXES['nci-pilot1-test']['name'] = 'NCI Pilot 1 Test Index'
SEARCH_INDEXES['nci-pilot1-test']['uuid'] = ('e0849c9b-b709-46f3'
                                             '-be21-80893fc1db84')
SEARCH_INDEXES['nci-pilot1-test']['unlisted'] = True

SEARCH_INDEXES['mdf-test'] = SEARCH_INDEXES['mdf'].copy()
SEARCH_INDEXES['mdf-test']['name'] = 'MDF Test'
SEARCH_INDEXES['mdf-test']['uuid'] = '5acded0c-a534-45af-84be-dcf042e36412'
SEARCH_INDEXES['mdf-test']['unlisted'] = True

TABBED_PROJECT_INDEXES = ['exalearn', 'nci-pilot1', 'nci-pilot1-test',
                          'kanzus', 'kasthuri']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    # This contains general Globus portal tools
    'globus_portal_framework',
    'social_django',
    'alcf_data_portal',
    'concierge_app',
    'automate_app',
    'exalearn_index',
    'xpcs_portal.xpcs_index',
    'xsd_img_index',
    'kanzus_index',
    'globus_tutorial_index',
    'xrf_2id_index',
    'hedm_sec1_index',
]

# Fetch data from apps defined outside the 'alcf_data_portal' project.
# Defining apps this way is now preferable, due to how many apps there are.
for app in [ap for ap in INSTALLED_APPS if ap.endswith('_index')]:
    try:
        app_search_indexes = import_string(f'{app}.apps.SEARCH_INDEXES')
        tbs = [name for name, index_data in app_search_indexes.items()
               if index_data.get('tabbed_project') is True]
        TABBED_PROJECT_INDEXES += tbs
        SEARCH_INDEXES.update(app_search_indexes)
    except ImportError:
        print(f'Error loading installed index {app}')
        pass

RAMSES_SEARCH_CATEGORIES = ['Storage', 'Data Transfer', 'Compute', 'Network']


SEARCH_RESULTS_PER_PAGE = 10
SEARCH_MAX_PAGES = 10
# This will be the automatic search query when the user loads the page, if
# they have not submitted their own query or there is no query loaded in the
# session. "*" will automatically search everything, but may not be desirable
# if there is a lot of search data in the index, as searches will take a while
DEFAULT_QUERY = '*'

PREVIEW_DATA_SIZE = 2048

SOCIAL_AUTH_GLOBUS_SCOPE = [
    'urn:globus:auth:scope:search.api.globus.org:all',
    'urn:globus:auth:scope:transfer.api.globus.org:all',
    'urn:globus:auth:scope:groups.api.globus.org:view_my_groups_and_memberships',  # noqa
    # General Petrel HTTPS scope used for previewing images and file content
    'https://auth.globus.org/scopes/56ceac29-e98a-440a-a594-b41e7a084b62/all',
    # Temporary scope for https on kanzus data,
    'https://auth.globus.org/scopes/c7683485-3c3f-454a-94c0-74310c80b32a/https',  # noqa
    'urn:globus:auth:scope:data.materialsdatafacility.org:all',
    CONCIERGE_SCOPE,
    # Note: Automate scopes are only added if the globus-automate-client is installed
] + flow_scopes

# Restricts which user tokens can be fetched for front-end use
ALLOWED_FRONTEND_TOKENS = [
    'petrel_https_server',
    'c7683485-3c3f-454a-94c0-74310c80b32a',
    'data.materialsdatafacility.org',
]

ALLOWED_HOSTS = []

# Fix Globus transfer for Django 2.1. Samesite flag with helper pages results
# in the user being logged out when redirected back to the portal
# https://github.com/globusonline/django-globus-portal-framework/issues/51
SESSION_COOKIE_SAMESITE = None

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'globus_portal_framework.middleware.GlobusAuthExceptionMiddleware',
    'globus_portal_framework.middleware.ExpiredTokenMiddleware',

]

AUTHENTICATION_BACKENDS = [
    'globus_portal_framework.auth.GlobusOpenIdConnect',
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = 'alcf_data_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'alcf_data_portal', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'globus_portal_framework.context_processors.globals',
                'alcf_data_portal.context_processors.globals',
            ],
        },
    },
]

# Add logging per-index.
index_loggers = {
    app_name: {
        'handlers': ['stream'],
        'level': 'DEBUG',
        'propagate': True,
    } for app_name in INSTALLED_APPS
    if app_name.endswith('_index')
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'stream': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
                    'handlers': ['stream'],
                    # 'handlers': ['null'],  # Quiet by default!
                    # 'propagate': False,
                    'level': 'WARNING',
                    },
        'globus_portal_framework': {
            'handlers': ['stream'],
            'level': 'INFO',
            'propagate': True,
        },
        'django': {
            'handlers': ['stream'],
            'level': 'WARNING',
            'propagate': True,
        },
        'alcf_data_portal': {
            'handlers': ['stream'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'automate_app': {
            'handlers': ['stream'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'concierge_app': {
            'handlers': ['stream'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
LOGGING['loggers'].update(index_loggers)

WSGI_APPLICATION = 'alcf_data_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Chicago'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# STATIC_ROOT = os.path.join(BASE_DIR, 'alcf_data_portal/static')
# print(STATIC_ROOT)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'alcf_data_portal/static')
]

# Override any settings here if a local_settings.py file exists
try:
    from alcf_data_portal.local_settings import *  # noqa
except ImportError:
    pass
